CCS PCM C Compiler, Version 4.104, 5967               04-may.-20 16:26

               Filename: C:\Users\EHef_\Documents\OCTAVO-SEMESTRE-ESCOM\Instru\proyectosPic\PracticaADC\main.lst

               ROM used: 1322 words (16%)
                         Largest free fragment is 2048
               RAM used: 11 (3%) at main() level
                         45 (12%) worst case
               Stack:    2 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3D8
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
03EB:  BCF    03.5
03EC:  CLRF   20
03ED:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay (clock=4MHz) 
.................... #use rs232 (baud=9600, parity=N, xmit=pin_c6, rcv=pin_c7, bits=8) 
.................... #byte TRISB=0x86 
.................... #byte PORTB=0x06 
....................  
....................  
.................... void main() 
.................... { 
*
03D8:  CLRF   04
03D9:  BCF    03.7
03DA:  MOVLW  1F
03DB:  ANDWF  03,F
03DC:  MOVLW  19
03DD:  BSF    03.5
03DE:  MOVWF  19
03DF:  MOVLW  A6
03E0:  MOVWF  18
03E1:  MOVLW  90
03E2:  BCF    03.5
03E3:  MOVWF  18
03E4:  BSF    03.5
03E5:  BSF    1F.0
03E6:  BSF    1F.1
03E7:  BSF    1F.2
03E8:  BCF    1F.3
03E9:  MOVLW  07
03EA:  MOVWF  1C
....................    TRISB = 0x00; 
*
03EE:  BSF    03.5
03EF:  CLRF   06
....................    PORTB = 0x00; 
03F0:  BCF    03.5
03F1:  CLRF   06
....................    int16 dato, dato3; 
....................    float dato2, dato4; 
....................    setup_adc_ports(ALL_ANALOG);  
03F2:  BSF    03.5
03F3:  BCF    1F.0
03F4:  BCF    1F.1
03F5:  BCF    1F.2
03F6:  BCF    1F.3
....................    setup_adc_ports(AN0); 
03F7:  BCF    1F.0
03F8:  BSF    1F.1
03F9:  BSF    1F.2
03FA:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_internal); 
03FB:  BCF    1F.6
03FC:  BCF    03.5
03FD:  BSF    1F.6
03FE:  BSF    1F.7
03FF:  BSF    03.5
0400:  BSF    1F.7
0401:  BCF    03.5
0402:  BSF    1F.0
....................     
....................       while(true) 
....................       { 
....................          set_adc_channel(0); 
0403:  MOVLW  00
0404:  MOVWF  78
0405:  MOVF   1F,W
0406:  ANDLW  C7
0407:  IORWF  78,W
0408:  MOVWF  1F
....................          //delay_ms(1000); 
....................          dato=read_adc(); 
0409:  BSF    1F.2
040A:  BTFSC  1F.2
040B:  GOTO   40A
040C:  BSF    03.5
040D:  MOVF   1E,W
040E:  BCF    03.5
040F:  MOVWF  22
0410:  MOVF   1E,W
0411:  MOVWF  23
....................          dato2=(dato*5.0)/1023.0; 
0412:  MOVF   23,W
0413:  MOVWF  2F
0414:  MOVF   22,W
0415:  MOVWF  2E
0416:  CALL   04A
0417:  MOVF   7A,W
0418:  MOVWF  3E
0419:  MOVF   79,W
041A:  MOVWF  3D
041B:  MOVF   78,W
041C:  MOVWF  3C
041D:  MOVF   77,W
041E:  MOVWF  3B
041F:  CLRF   42
0420:  CLRF   41
0421:  MOVLW  20
0422:  MOVWF  40
0423:  MOVLW  81
0424:  MOVWF  3F
0425:  CALL   067
0426:  MOVF   77,W
0427:  MOVWF  2E
0428:  MOVF   78,W
0429:  MOVWF  2F
042A:  MOVF   79,W
042B:  MOVWF  30
042C:  MOVF   7A,W
042D:  MOVWF  31
042E:  MOVWF  35
042F:  MOVF   79,W
0430:  MOVWF  34
0431:  MOVF   78,W
0432:  MOVWF  33
0433:  MOVF   77,W
0434:  MOVWF  32
0435:  CLRF   39
0436:  MOVLW  C0
0437:  MOVWF  38
0438:  MOVLW  7F
0439:  MOVWF  37
043A:  MOVLW  88
043B:  MOVWF  36
043C:  CALL   0DC
043D:  MOVF   7A,W
043E:  MOVWF  29
043F:  MOVF   79,W
0440:  MOVWF  28
0441:  MOVF   78,W
0442:  MOVWF  27
0443:  MOVF   77,W
0444:  MOVWF  26
....................          set_adc_channel(1); 
0445:  MOVLW  08
0446:  MOVWF  78
0447:  MOVF   1F,W
0448:  ANDLW  C7
0449:  IORWF  78,W
044A:  MOVWF  1F
....................          dato3=read_adc(); 
044B:  BSF    1F.2
044C:  BTFSC  1F.2
044D:  GOTO   44C
044E:  BSF    03.5
044F:  MOVF   1E,W
0450:  BCF    03.5
0451:  MOVWF  24
0452:  MOVF   1E,W
0453:  MOVWF  25
....................          dato4=(dato3*5.0)/1023.0; 
0454:  MOVF   25,W
0455:  MOVWF  2F
0456:  MOVF   24,W
0457:  MOVWF  2E
0458:  CALL   04A
0459:  MOVF   7A,W
045A:  MOVWF  3E
045B:  MOVF   79,W
045C:  MOVWF  3D
045D:  MOVF   78,W
045E:  MOVWF  3C
045F:  MOVF   77,W
0460:  MOVWF  3B
0461:  CLRF   42
0462:  CLRF   41
0463:  MOVLW  20
0464:  MOVWF  40
0465:  MOVLW  81
0466:  MOVWF  3F
0467:  CALL   067
0468:  MOVF   77,W
0469:  MOVWF  2E
046A:  MOVF   78,W
046B:  MOVWF  2F
046C:  MOVF   79,W
046D:  MOVWF  30
046E:  MOVF   7A,W
046F:  MOVWF  31
0470:  MOVWF  35
0471:  MOVF   79,W
0472:  MOVWF  34
0473:  MOVF   78,W
0474:  MOVWF  33
0475:  MOVF   77,W
0476:  MOVWF  32
0477:  CLRF   39
0478:  MOVLW  C0
0479:  MOVWF  38
047A:  MOVLW  7F
047B:  MOVWF  37
047C:  MOVLW  88
047D:  MOVWF  36
047E:  CALL   0DC
047F:  MOVF   7A,W
0480:  MOVWF  2D
0481:  MOVF   79,W
0482:  MOVWF  2C
0483:  MOVF   78,W
0484:  MOVWF  2B
0485:  MOVF   77,W
0486:  MOVWF  2A
....................          printf("Lectura en LSB sensor 1   %4Ld\r\n", dato); 
0487:  MOVLW  04
0488:  BSF    03.6
0489:  MOVWF  0D
048A:  MOVLW  00
048B:  MOVWF  0F
048C:  BCF    03.0
048D:  MOVLW  1A
048E:  BCF    03.6
048F:  MOVWF  2E
0490:  CALL   1A6
0491:  MOVLW  02
0492:  MOVWF  04
0493:  MOVF   23,W
0494:  MOVWF  2F
0495:  MOVF   22,W
0496:  MOVWF  2E
0497:  CALL   1F6
0498:  MOVLW  0D
0499:  BTFSS  0C.4
049A:  GOTO   499
049B:  MOVWF  19
049C:  MOVLW  0A
049D:  BTFSS  0C.4
049E:  GOTO   49D
049F:  MOVWF  19
....................          printf("Valor en voltaje sensor 1 %2.2Lf\r\n\n", dato2); 
04A0:  MOVLW  15
04A1:  BSF    03.6
04A2:  MOVWF  0D
04A3:  MOVLW  00
04A4:  MOVWF  0F
04A5:  BCF    03.0
04A6:  MOVLW  1A
04A7:  BCF    03.6
04A8:  MOVWF  2E
04A9:  CALL   1A6
04AA:  MOVLW  89
04AB:  MOVWF  04
04AC:  MOVF   29,W
04AD:  MOVWF  31
04AE:  MOVF   28,W
04AF:  MOVWF  30
04B0:  MOVF   27,W
04B1:  MOVWF  2F
04B2:  MOVF   26,W
04B3:  MOVWF  2E
04B4:  MOVLW  02
04B5:  MOVWF  32
04B6:  CALL   2AE
04B7:  MOVLW  0D
04B8:  BTFSS  0C.4
04B9:  GOTO   4B8
04BA:  MOVWF  19
04BB:  MOVLW  0A
04BC:  BTFSS  0C.4
04BD:  GOTO   4BC
04BE:  MOVWF  19
04BF:  MOVLW  0A
04C0:  BTFSS  0C.4
04C1:  GOTO   4C0
04C2:  MOVWF  19
....................           
....................           
....................          printf("Lectura en LSB sensor 2   %4Ld\r\n", dato3); 
04C3:  MOVLW  27
04C4:  BSF    03.6
04C5:  MOVWF  0D
04C6:  MOVLW  00
04C7:  MOVWF  0F
04C8:  BCF    03.0
04C9:  MOVLW  1A
04CA:  BCF    03.6
04CB:  MOVWF  2E
04CC:  CALL   1A6
04CD:  MOVLW  02
04CE:  MOVWF  04
04CF:  MOVF   25,W
04D0:  MOVWF  2F
04D1:  MOVF   24,W
04D2:  MOVWF  2E
04D3:  CALL   1F6
04D4:  MOVLW  0D
04D5:  BTFSS  0C.4
04D6:  GOTO   4D5
04D7:  MOVWF  19
04D8:  MOVLW  0A
04D9:  BTFSS  0C.4
04DA:  GOTO   4D9
04DB:  MOVWF  19
....................          printf("Valor en voltaje sensor 2 %2.2Lf\r\n\n", dato4); 
04DC:  MOVLW  38
04DD:  BSF    03.6
04DE:  MOVWF  0D
04DF:  MOVLW  00
04E0:  MOVWF  0F
04E1:  BCF    03.0
04E2:  MOVLW  1A
04E3:  BCF    03.6
04E4:  MOVWF  2E
04E5:  CALL   1A6
04E6:  MOVLW  89
04E7:  MOVWF  04
04E8:  MOVF   2D,W
04E9:  MOVWF  31
04EA:  MOVF   2C,W
04EB:  MOVWF  30
04EC:  MOVF   2B,W
04ED:  MOVWF  2F
04EE:  MOVF   2A,W
04EF:  MOVWF  2E
04F0:  MOVLW  02
04F1:  MOVWF  32
04F2:  CALL   2AE
04F3:  MOVLW  0D
04F4:  BTFSS  0C.4
04F5:  GOTO   4F4
04F6:  MOVWF  19
04F7:  MOVLW  0A
04F8:  BTFSS  0C.4
04F9:  GOTO   4F8
04FA:  MOVWF  19
04FB:  MOVLW  0A
04FC:  BTFSS  0C.4
04FD:  GOTO   4FC
04FE:  MOVWF  19
....................           
....................          if(dato2 < 0.30)bit_set(PORTB, 0); 
04FF:  MOVF   29,W
0500:  MOVWF  31
0501:  MOVF   28,W
0502:  MOVWF  30
0503:  MOVF   27,W
0504:  MOVWF  2F
0505:  MOVF   26,W
0506:  MOVWF  2E
0507:  MOVLW  9A
0508:  MOVWF  35
0509:  MOVLW  99
050A:  MOVWF  34
050B:  MOVLW  19
050C:  MOVWF  33
050D:  MOVLW  7D
050E:  MOVWF  32
050F:  CALL   399
0510:  BTFSS  03.0
0511:  GOTO   514
0512:  BSF    06.0
....................          else bit_clear(PORTB, 0); 
0513:  GOTO   515
0514:  BCF    06.0
....................          if(dato4 > 0.50) bit_set(PORTB, 1); 
0515:  CLRF   31
0516:  CLRF   30
0517:  CLRF   2F
0518:  MOVLW  7E
0519:  MOVWF  2E
051A:  MOVF   2D,W
051B:  MOVWF  35
051C:  MOVF   2C,W
051D:  MOVWF  34
051E:  MOVF   2B,W
051F:  MOVWF  33
0520:  MOVF   2A,W
0521:  MOVWF  32
0522:  CALL   399
0523:  BTFSS  03.0
0524:  GOTO   527
0525:  BSF    06.1
....................          else bit_clear(PORTB, 1); 
0526:  GOTO   528
0527:  BCF    06.1
....................       } 
0528:  GOTO   403
.................... } 
0529:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
