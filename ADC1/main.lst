CCS PCM C Compiler, Version 4.104, 5967               30-abr.-20 16:39

               Filename: C:\Users\EHef_\Documents\OCTAVO-SEMESTRE-ESCOM\Instru\proyectosPic\ADC1\main.lst

               ROM used: 1244 words (15%)
                         Largest free fragment is 2048
               RAM used: 23 (6%) at main() level
                         45 (12%) worst case
               Stack:    2 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3B0
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
03C3:  BCF    03.5
03C4:  CLRF   20
03C5:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT 
.................... #use delay (clock=4MHz) 
*
004A:  MOVLW  2F
004B:  MOVWF  04
004C:  BCF    03.7
004D:  MOVF   00,W
004E:  BTFSC  03.2
004F:  GOTO   05E
0050:  MOVLW  01
0051:  MOVWF  78
0052:  CLRF   77
0053:  DECFSZ 77,F
0054:  GOTO   053
0055:  DECFSZ 78,F
0056:  GOTO   052
0057:  MOVLW  4A
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  GOTO   05C
005C:  DECFSZ 00,F
005D:  GOTO   050
005E:  BCF    0A.3
005F:  BCF    0A.4
0060:  GOTO   3E2 (RETURN)
.................... #use rs232 (baud=9600, parity=N, xmit=pin_c6, rcv=pin_c7, bits=8) 
....................  
....................  
.................... void main() 
.................... { 
*
03B0:  CLRF   04
03B1:  BCF    03.7
03B2:  MOVLW  1F
03B3:  ANDWF  03,F
03B4:  MOVLW  19
03B5:  BSF    03.5
03B6:  MOVWF  19
03B7:  MOVLW  A6
03B8:  MOVWF  18
03B9:  MOVLW  90
03BA:  BCF    03.5
03BB:  MOVWF  18
03BC:  BSF    03.5
03BD:  BSF    1F.0
03BE:  BSF    1F.1
03BF:  BSF    1F.2
03C0:  BCF    1F.3
03C1:  MOVLW  07
03C2:  MOVWF  1C
....................    int16 dato, dato3; 
....................    float dato2, dato4; 
....................    setup_adc_ports(ALL_ANALOG);  
*
03C6:  BSF    03.5
03C7:  BCF    1F.0
03C8:  BCF    1F.1
03C9:  BCF    1F.2
03CA:  BCF    1F.3
....................    setup_adc_ports(AN0); 
03CB:  BCF    1F.0
03CC:  BSF    1F.1
03CD:  BSF    1F.2
03CE:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_internal); 
03CF:  BCF    1F.6
03D0:  BCF    03.5
03D1:  BSF    1F.6
03D2:  BSF    1F.7
03D3:  BSF    03.5
03D4:  BSF    1F.7
03D5:  BCF    03.5
03D6:  BSF    1F.0
....................     
....................       while(true) 
....................       { 
....................          set_adc_channel(0); 
03D7:  MOVLW  00
03D8:  MOVWF  78
03D9:  MOVF   1F,W
03DA:  ANDLW  C7
03DB:  IORWF  78,W
03DC:  MOVWF  1F
....................          delay_ms(1000); 
03DD:  MOVLW  04
03DE:  MOVWF  2E
03DF:  MOVLW  FA
03E0:  MOVWF  2F
03E1:  GOTO   04A
03E2:  DECFSZ 2E,F
03E3:  GOTO   3DF
....................          dato=read_adc(); 
03E4:  BSF    1F.2
03E5:  BTFSC  1F.2
03E6:  GOTO   3E5
03E7:  BSF    03.5
03E8:  MOVF   1E,W
03E9:  BCF    03.5
03EA:  MOVWF  22
03EB:  MOVF   1E,W
03EC:  MOVWF  23
....................          dato2=(dato*5.0)/1023.0; 
03ED:  MOVF   23,W
03EE:  MOVWF  2F
03EF:  MOVF   22,W
03F0:  MOVWF  2E
03F1:  CALL   061
03F2:  MOVF   7A,W
03F3:  MOVWF  3E
03F4:  MOVF   79,W
03F5:  MOVWF  3D
03F6:  MOVF   78,W
03F7:  MOVWF  3C
03F8:  MOVF   77,W
03F9:  MOVWF  3B
03FA:  CLRF   42
03FB:  CLRF   41
03FC:  MOVLW  20
03FD:  MOVWF  40
03FE:  MOVLW  81
03FF:  MOVWF  3F
0400:  CALL   07E
0401:  MOVF   77,W
0402:  MOVWF  2E
0403:  MOVF   78,W
0404:  MOVWF  2F
0405:  MOVF   79,W
0406:  MOVWF  30
0407:  MOVF   7A,W
0408:  MOVWF  31
0409:  MOVWF  35
040A:  MOVF   79,W
040B:  MOVWF  34
040C:  MOVF   78,W
040D:  MOVWF  33
040E:  MOVF   77,W
040F:  MOVWF  32
0410:  CLRF   39
0411:  MOVLW  C0
0412:  MOVWF  38
0413:  MOVLW  7F
0414:  MOVWF  37
0415:  MOVLW  88
0416:  MOVWF  36
0417:  CALL   0F3
0418:  MOVF   7A,W
0419:  MOVWF  29
041A:  MOVF   79,W
041B:  MOVWF  28
041C:  MOVF   78,W
041D:  MOVWF  27
041E:  MOVF   77,W
041F:  MOVWF  26
....................          set_adc_channel(1); 
0420:  MOVLW  08
0421:  MOVWF  78
0422:  MOVF   1F,W
0423:  ANDLW  C7
0424:  IORWF  78,W
0425:  MOVWF  1F
....................          dato3=read_adc(); 
0426:  BSF    1F.2
0427:  BTFSC  1F.2
0428:  GOTO   427
0429:  BSF    03.5
042A:  MOVF   1E,W
042B:  BCF    03.5
042C:  MOVWF  24
042D:  MOVF   1E,W
042E:  MOVWF  25
....................          dato4=(dato3*5.0)/1023.0; 
042F:  MOVF   25,W
0430:  MOVWF  2F
0431:  MOVF   24,W
0432:  MOVWF  2E
0433:  CALL   061
0434:  MOVF   7A,W
0435:  MOVWF  3E
0436:  MOVF   79,W
0437:  MOVWF  3D
0438:  MOVF   78,W
0439:  MOVWF  3C
043A:  MOVF   77,W
043B:  MOVWF  3B
043C:  CLRF   42
043D:  CLRF   41
043E:  MOVLW  20
043F:  MOVWF  40
0440:  MOVLW  81
0441:  MOVWF  3F
0442:  CALL   07E
0443:  MOVF   77,W
0444:  MOVWF  2E
0445:  MOVF   78,W
0446:  MOVWF  2F
0447:  MOVF   79,W
0448:  MOVWF  30
0449:  MOVF   7A,W
044A:  MOVWF  31
044B:  MOVWF  35
044C:  MOVF   79,W
044D:  MOVWF  34
044E:  MOVF   78,W
044F:  MOVWF  33
0450:  MOVF   77,W
0451:  MOVWF  32
0452:  CLRF   39
0453:  MOVLW  C0
0454:  MOVWF  38
0455:  MOVLW  7F
0456:  MOVWF  37
0457:  MOVLW  88
0458:  MOVWF  36
0459:  CALL   0F3
045A:  MOVF   7A,W
045B:  MOVWF  2D
045C:  MOVF   79,W
045D:  MOVWF  2C
045E:  MOVF   78,W
045F:  MOVWF  2B
0460:  MOVF   77,W
0461:  MOVWF  2A
....................          printf("Lectura en LSB sensor 1   %4Ld\r\n", dato); 
0462:  MOVLW  04
0463:  BSF    03.6
0464:  MOVWF  0D
0465:  MOVLW  00
0466:  MOVWF  0F
0467:  BCF    03.0
0468:  MOVLW  1A
0469:  BCF    03.6
046A:  MOVWF  2E
046B:  CALL   1BD
046C:  MOVLW  02
046D:  MOVWF  04
046E:  MOVF   23,W
046F:  MOVWF  2F
0470:  MOVF   22,W
0471:  MOVWF  2E
0472:  CALL   20D
0473:  MOVLW  0D
0474:  BTFSS  0C.4
0475:  GOTO   474
0476:  MOVWF  19
0477:  MOVLW  0A
0478:  BTFSS  0C.4
0479:  GOTO   478
047A:  MOVWF  19
....................          printf("Valor en voltaje sensor 1 %2.2Lf\r\n\n", dato2); 
047B:  MOVLW  15
047C:  BSF    03.6
047D:  MOVWF  0D
047E:  MOVLW  00
047F:  MOVWF  0F
0480:  BCF    03.0
0481:  MOVLW  1A
0482:  BCF    03.6
0483:  MOVWF  2E
0484:  CALL   1BD
0485:  MOVLW  89
0486:  MOVWF  04
0487:  MOVF   29,W
0488:  MOVWF  31
0489:  MOVF   28,W
048A:  MOVWF  30
048B:  MOVF   27,W
048C:  MOVWF  2F
048D:  MOVF   26,W
048E:  MOVWF  2E
048F:  MOVLW  02
0490:  MOVWF  32
0491:  CALL   2C5
0492:  MOVLW  0D
0493:  BTFSS  0C.4
0494:  GOTO   493
0495:  MOVWF  19
0496:  MOVLW  0A
0497:  BTFSS  0C.4
0498:  GOTO   497
0499:  MOVWF  19
049A:  MOVLW  0A
049B:  BTFSS  0C.4
049C:  GOTO   49B
049D:  MOVWF  19
....................           
....................           
....................          printf("Lectura en LSB sensor 2   %4Ld\r\n", dato3); 
049E:  MOVLW  27
049F:  BSF    03.6
04A0:  MOVWF  0D
04A1:  MOVLW  00
04A2:  MOVWF  0F
04A3:  BCF    03.0
04A4:  MOVLW  1A
04A5:  BCF    03.6
04A6:  MOVWF  2E
04A7:  CALL   1BD
04A8:  MOVLW  02
04A9:  MOVWF  04
04AA:  MOVF   25,W
04AB:  MOVWF  2F
04AC:  MOVF   24,W
04AD:  MOVWF  2E
04AE:  CALL   20D
04AF:  MOVLW  0D
04B0:  BTFSS  0C.4
04B1:  GOTO   4B0
04B2:  MOVWF  19
04B3:  MOVLW  0A
04B4:  BTFSS  0C.4
04B5:  GOTO   4B4
04B6:  MOVWF  19
....................          printf("Valor en voltaje sensor 2 %2.2Lf\r\n\n", dato4); 
04B7:  MOVLW  38
04B8:  BSF    03.6
04B9:  MOVWF  0D
04BA:  MOVLW  00
04BB:  MOVWF  0F
04BC:  BCF    03.0
04BD:  MOVLW  1A
04BE:  BCF    03.6
04BF:  MOVWF  2E
04C0:  CALL   1BD
04C1:  MOVLW  89
04C2:  MOVWF  04
04C3:  MOVF   2D,W
04C4:  MOVWF  31
04C5:  MOVF   2C,W
04C6:  MOVWF  30
04C7:  MOVF   2B,W
04C8:  MOVWF  2F
04C9:  MOVF   2A,W
04CA:  MOVWF  2E
04CB:  MOVLW  02
04CC:  MOVWF  32
04CD:  CALL   2C5
04CE:  MOVLW  0D
04CF:  BTFSS  0C.4
04D0:  GOTO   4CF
04D1:  MOVWF  19
04D2:  MOVLW  0A
04D3:  BTFSS  0C.4
04D4:  GOTO   4D3
04D5:  MOVWF  19
04D6:  MOVLW  0A
04D7:  BTFSS  0C.4
04D8:  GOTO   4D7
04D9:  MOVWF  19
....................       } 
04DA:  GOTO   3D7
.................... } 
04DB:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
